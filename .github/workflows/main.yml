name: Java CI with Gradle and Integration Dependencies

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:6
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
      rabbitmq:
        image: rabbitmq:3.12-management
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd="rabbitmq-diagnostics -q ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: '8.5'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle

      - name: List file structure for debug
        run: ls -R

      - name: Build and Test ProductService
        run: gradle -p ProductService build test

      - name: Upload Test Report
        if: always()  # Uploads even if tests fail
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: ProductService/build/reports/tests/test

  dockerhub-push:
    needs: build  # Runs after the build job completes
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Build ProductService with Gradle
      run: gradle -p ProductService build

    - name: Copy JAR to Docker context
      run: cp ProductService/build/libs/*.jar User_Service/    

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}

    - name: Extract Git SHA
      id: vars
      run: echo "GIT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

    - name: Build and Push ProductService Docker Image
      uses: docker/build-push-action@v5
      with:
        context: ./ProductService  # Adjust if your Dockerfile is located elsewhere
        push: true
        tags: |
          refl21/productservice:${{ env.GIT_SHA }}
          refl21/productservice:latest
    
